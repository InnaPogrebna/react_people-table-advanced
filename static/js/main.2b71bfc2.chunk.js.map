{"version":3,"sources":["api/api.ts","components/PeopleRow/PeopleRow.tsx","components/PeopleTable/PeopleTable.tsx","components/NewPerson/NewPerson.tsx","components/PeoplePage/PeoplePage.tsx","components/HomePage/HomePage.tsx","App.tsx","index.tsx"],"names":["getPeople","a","fetch","response","json","PeopleRow","person","selectedSort","location","useLocation","className","to","pathname","slug","search","sex","name","born","died","mother","motherName","father","fatherName","PeopleTable","filterPeople","getSortTable","sortOrder","useParams","changeArrow","value","disabledTable","length","onClick","src","alt","map","NewPerson","addNewPeople","people","setIsOpenForm","useState","newPerson","setNewPerson","slugPerson","setSlugPerson","setFather","setMother","navigate","useNavigate","validName","setValidName","errorName","setErrorName","validAge","setValidAge","errorAge","setErrorAge","filterPerson","filter","handleChange","event","concat","toString","valName","RegExp","target","type","checked","prevState","test","validation","age","validationAge","handleChangeSelect","setSelect","listOfMother","useMemo","listOfFather","onSubmit","preventDefault","addPerson","undefined","find","placeholder","onChange","required","htmlFor","id","min","max","Date","getFullYear","step","disabled","PeoplePage","setPeople","searchParams","URLSearchParams","isOpenForm","appliedQuery","get","query","setQuery","sortBy","setSelectedSort","isLoading","setIsLoading","useEffect","then","human","m","f","applyQuery","useCallback","debounce","newQuery","set","delete","lowerQuery","toLowerCase","includes","sort","b","localeCompare","getOpenForm","curList","style","width","marginBottom","color","HomePage","App","path","element","replace","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.2b71bfc2.chunk.js","sourcesContent":["const BASE_URL\n= 'https://mate-academy.github.io/react_people-table/api/people.json';\n\nexport const getPeople = async () => {\n  try {\n    const response = await fetch(`${BASE_URL}`);\n\n    return await response.json();\n  } catch (error) {\n    return 'error';\n  }\n};\n","import React from 'react';\nimport { Link, useLocation } from 'react-router-dom';\nimport { People } from '../../types/people';\nimport './PeopleRow.scss';\n\ntype Props = {\n  person: People,\n  selectedSort: string,\n};\n\nconst PeopleRow:React.FC<Props> = ({ person, selectedSort }) => {\n  const location = useLocation();\n\n  return (\n    <>\n      <td\n        className={(selectedSort === 'name') ? 'is-selected' : ''}\n      >\n        <Link\n          to={{\n            pathname: `/people/${person.slug}`,\n            search: location.search,\n          }}\n          className={(person.sex === 'm') ? 'man' : 'woman'}\n        >\n          {person.name}\n        </Link>\n      </td>\n      <td\n        className={(selectedSort === 'sex') ? 'is-selected' : ''}\n      >\n        {person.sex}\n      </td>\n      <td\n        className={(selectedSort === 'born') ? 'is-selected' : ''}\n      >\n        {person.born}\n      </td>\n      <td\n        className={(selectedSort === 'died') ? 'is-selected' : ''}\n      >\n        {person.died}\n      </td>\n      <td>\n        {person.mother\n          ? (\n            <Link\n              to={{\n                pathname: `/people/${person.mother.slug}`,\n                search: location.search,\n              }}\n              className=\"woman\"\n            >\n              {person.motherName}\n            </Link>\n          )\n          : (\n            <>\n              {person.motherName}\n            </>\n          )}\n      </td>\n      <td>\n        {person.father\n          ? (\n            <Link\n              to={{\n                pathname: `/people/${person.father.slug}`,\n                search: location.search,\n              }}\n              className=\"man\"\n            >\n              {person.fatherName}\n            </Link>\n          )\n          : (\n            <>\n              {person.fatherName}\n            </>\n          )}\n      </td>\n    </>\n  );\n};\n\nexport default PeopleRow;\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { People } from '../../types/people';\nimport PeopleRow from '../PeopleRow/PeopleRow';\nimport './PeopleTable.scss';\n\ntype Props = {\n  filterPeople: People[],\n  getSortTable: (sort:string) => void,\n  sortOrder: string,\n  selectedSort: string,\n};\n\nconst PeopleTable: React.FC<Props> = ({\n  filterPeople,\n  getSortTable,\n  sortOrder,\n  selectedSort,\n}) => {\n  const { slug } = useParams<{ slug: string }>();\n\n  const changeArrow = (value:string) => {\n    if ((selectedSort === value) && sortOrder) {\n      switch (sortOrder) {\n        case 'asc':\n          return './images/sort_asc.png';\n        case 'desc':\n          return './images/sort_desc.png';\n        default:\n          break;\n      }\n    }\n\n    return './images/sort_both.png';\n  };\n\n  const disabledTable = () => {\n    return (filterPeople.length === 0) ? 'disabled' : '';\n  };\n\n  return (\n    <table className=\"table table-border is-hoverable is-striped is-bordered\">\n      <thead>\n        <tr>\n          <th\n            onClick={() => getSortTable('name')}\n            className={disabledTable()}\n          >\n            <span>Name</span>\n            <img\n              src={changeArrow('name')}\n              alt=\"arrow\"\n              className=\"img\"\n            />\n          </th>\n          <th\n            onClick={() => getSortTable('sex')}\n            className={disabledTable()}\n          >\n            <span>Sex</span>\n            <img\n              src={changeArrow('sex')}\n              alt=\"arrow\"\n              className=\"img\"\n            />\n          </th>\n          <th\n            onClick={() => getSortTable('born')}\n            className={disabledTable()}\n          >\n            <span>Born</span>\n            <img\n              src={changeArrow('born')}\n              alt=\"arrow\"\n              className=\"img\"\n            />\n          </th>\n          <th\n            onClick={() => getSortTable('died')}\n            className={disabledTable()}\n          >\n            <span>Died</span>\n            <img\n              src={changeArrow('died')}\n              alt=\"arrow\"\n              className=\"img\"\n            />\n          </th>\n          <th>Mother</th>\n          <th>Father</th>\n        </tr>\n      </thead>\n      <tbody>\n        {filterPeople.map(person => (\n          <tr\n            key={person.slug}\n            className={`${(slug === person.slug) ? 'is-selected' : ''}`}\n          >\n            <PeopleRow\n              person={person}\n              selectedSort={selectedSort}\n            />\n          </tr>\n        ))}\n      </tbody>\n\n    </table>\n  );\n};\n\nexport default PeopleTable;\n","import React, { useMemo, useState } from 'react';\nimport { useNavigate } from 'react-router-dom';\nimport { People } from '../../types/people';\nimport './NewPerson.scss';\n\ntype Props = {\n  people: People[],\n  addNewPeople: (newPerson:People) => void,\n  setIsOpenForm: (arg0: boolean) => void,\n};\n\nconst NewPerson:React.FC<Props> = ({ addNewPeople, people, setIsOpenForm }) => {\n  const [newPerson, setNewPerson] = useState<People>({\n    name: '',\n    sex: 'm' || 'f',\n    born: 0,\n    died: 0,\n  });\n\n  const [slugPerson, setSlugPerson] = useState('');\n  const [father, setFather] = useState('');\n  const [mother, setMother] = useState('');\n  const navigate = useNavigate();\n\n  const [validName, setValidName] = useState(true);\n  const [errorName, setErrorName] = useState('');\n  const [validAge, setValidAge] = useState(true);\n  const [errorAge, setErrorAge] = useState('');\n\n  const filterPerson = (value:string) => {\n    return people.filter(person => person.sex === value)\n      .filter(person => (+person.died > +newPerson.born)\n        && (+person.born < +newPerson.born));\n  };\n\n  const handleChange = (\n    event:React.ChangeEvent<HTMLInputElement>,\n  ) => {\n    setSlugPerson(newPerson.name.concat((newPerson.born).toString()));\n    const valName = new RegExp(/^(?! )[А-Яа-яЁёA-Za-z\\s]+$/);\n\n    const {\n      name, value, type, checked,\n    } = event.target;\n\n    setNewPerson((prevState) => ({\n      ...prevState,\n      [name]: type === 'checkbox' ? checked : value,\n    }));\n\n    if (name === 'name') {\n      setValidName(valName.test(value));\n    }\n  };\n\n  const validationAge = () => {\n    const age = newPerson.died - newPerson.born;\n\n    if (age >= 0 && age < 150) {\n      setValidAge(validAge);\n\n      return true;\n    }\n\n    setValidAge(!validAge);\n\n    return false;\n  };\n\n  const validation = () => {\n    if (!validName || !validationAge()) {\n      setErrorName(\"Your name isn't validation\");\n      setErrorAge('Not valid age');\n\n      return false;\n    }\n\n    return true;\n  };\n\n  const handleChangeSelect = (\n    setSelect:(value:string)=>void,\n    event:React.ChangeEvent<HTMLSelectElement | HTMLInputElement>,\n  ) => {\n    setSelect(event.target.value);\n  };\n\n  const onSubmit = (event: React.FormEvent) => {\n    event.preventDefault();\n    if (newPerson && validation()) {\n      const addPerson = {\n        ...newPerson,\n        slug: slugPerson,\n        motherName: mother || undefined,\n        fatherName: father || undefined,\n        mother: people.find(person => person.name === mother),\n        father: people.find(person => person.name === father),\n      };\n\n      addNewPeople(addPerson);\n      navigate('/people');\n      setIsOpenForm(false);\n    }\n  };\n\n  const listOfMother = useMemo(() => (\n    filterPerson('f')\n  ), [people, newPerson.born]);\n\n  const listOfFather = useMemo(() => (\n    filterPerson('m')\n  ), [people, newPerson.born]);\n\n  return (\n    <>\n      <div>NewPerson</div>\n      <form onSubmit={onSubmit} className=\"form\">\n        <div className=\"control\">\n          <label className=\"label\">\n            Name:\n            <input\n              type=\"text\"\n              placeholder=\"Name\"\n              className=\"input\"\n              name=\"name\"\n              value={newPerson.name}\n              onChange={handleChange}\n              required\n            />\n          </label>\n          {!validName\n            && (\n              <p className=\"error\">\n                {errorName}\n              </p>\n            )}\n        </div>\n        <div className=\"control\">\n          <label\n            className=\"radio\"\n            htmlFor=\"sex_m\"\n          >\n            <input\n              type=\"radio\"\n              id=\"sex_m\"\n              name=\"sex\"\n              value=\"m\"\n              onChange={handleChange}\n              required\n            />\n            Male\n          </label>\n          <label\n            className=\"radio\"\n            htmlFor=\"sex_f\"\n          >\n            <input\n              type=\"radio\"\n              id=\"sex_f\"\n              name=\"sex\"\n              value=\"f\"\n              onChange={handleChange}\n              required\n            />\n            Female\n          </label>\n        </div>\n        <label\n          htmlFor=\"BornYear\"\n          className=\"label\"\n        >\n          Born :\n          <input\n            type=\"number\"\n            name=\"born\"\n            value={newPerson.born}\n            min=\"1400\"\n            max={new Date().getFullYear()}\n            step=\"1\"\n            onChange={handleChange}\n            required\n          />\n        </label>\n        <label\n          htmlFor=\"DiedYear\"\n          className=\"label\"\n        >\n          Died :\n          <input\n            type=\"number\"\n            disabled={(newPerson.born < 1400)}\n            name=\"died\"\n            value={newPerson.died}\n            min=\"1400\"\n            max={new Date().getFullYear()}\n            step=\"1\"\n            onChange={handleChange}\n          />\n        </label>\n        {!validAge\n            && (\n              <p className=\"error\">\n                {errorAge}\n              </p>\n            )}\n        <label className=\"label\">\n          Mother:\n          <select\n            name=\"motherName\"\n            disabled={newPerson.born < 1400 || (listOfMother.length === 0)}\n            className=\"select selectBlock\"\n            onChange={(event) => handleChangeSelect(setMother, event)}\n          >\n            <option value=\"mother\">Choose mother`s name</option>\n            {listOfMother.map((person) => (\n              <option\n                key={person.slug}\n                value={person.name}\n              >\n                {person.name}\n              </option>\n            ))}\n          </select>\n        </label>\n        <label className=\"label\">\n          Father:\n          <select\n            name=\"fatherName\"\n            disabled={newPerson.born < 1400 || (listOfFather.length === 0)}\n            className=\"select selectBlock\"\n            onChange={(event) => handleChangeSelect(setFather, event)}\n          >\n            <option value=\"father\">Choose father`s name</option>\n            {listOfFather.map((person) => (\n              <option\n                key={person.slug}\n                value={person.name}\n              >\n                {person.name}\n              </option>\n            ))}\n          </select>\n        </label>\n        <button\n          type=\"submit\"\n          className=\"button is-hovered\"\n        >\n          Add\n        </button>\n      </form>\n    </>\n  );\n};\n\nexport default NewPerson;\n","import React, {\n  useCallback, useEffect, useMemo, useState,\n} from 'react';\nimport { TailSpin } from 'react-loader-spinner';\nimport { Link, useLocation, useNavigate } from 'react-router-dom';\nimport { debounce } from 'lodash';\nimport { getPeople } from '../../api/api';\nimport { People } from '../../types/people';\nimport PeopleTable from '../PeopleTable/PeopleTable';\nimport NewPerson from '../NewPerson/NewPerson';\nimport './PeoplePage.scss';\n\nconst PeoplePage: React.FC = () => {\n  const [people, setPeople] = useState<People[]>([]);\n  const navigate = useNavigate();\n  const location = useLocation();\n  const searchParams = new URLSearchParams(location.search);\n  // const [sortOrder, setSortOrder] = useState('asc');\n\n  const [isOpenForm, setIsOpenForm] = useState(false);\n  const appliedQuery = searchParams.get('query') || '';\n  const [query, setQuery] = useState(appliedQuery);\n  const sortBy = searchParams.get('sortBy') || '';\n  const sortOrder = searchParams.get('sortOrder') || '';\n  const [selectedSort, setSelectedSort] = useState(sortBy);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    setIsLoading(true);\n    getPeople()\n      .then(response => setPeople(response.map((human: People) => {\n        const mother = response\n          .find((m: People) => m.name === human.motherName);\n        const father = response\n          .find((f: People) => f.name === human.fatherName);\n\n        return { ...human, mother, father };\n      })));\n    setIsLoading(false);\n  }, []);\n\n  const addNewPeople = (newPerson:People) => {\n    setPeople(curList => [...curList, newPerson]);\n  };\n\n  const applyQuery = useCallback(\n    debounce((newQuery) => {\n      if (newQuery) {\n        searchParams.set('query', newQuery);\n      } else {\n        searchParams.delete('query');\n      }\n\n      navigate(`?${searchParams.toString()}`);\n    }, 500),\n    [],\n  );\n\n  const handleQueryChange = (event: React.ChangeEvent<HTMLInputElement>) => {\n    setQuery(event.target.value);\n    applyQuery(event.target.value);\n  };\n\n  const lowerQuery = query.toLowerCase();\n\n  const filterPeople = useMemo(() => (people\n    .filter(person => person.name.toLowerCase().includes(lowerQuery)\n    || person.motherName?.toLowerCase().includes(lowerQuery)\n    || person.fatherName?.toLowerCase().includes(lowerQuery))\n    .sort((a, b) => {\n      switch (sortBy) {\n        case 'name':\n        case 'sex':\n          return sortOrder === 'asc'\n            ? a[sortBy].localeCompare(b[sortBy])\n            : b[sortBy].localeCompare(a[sortBy]);\n        case 'born':\n        case 'died':\n          return sortOrder === 'asc'\n            ? a[sortBy] - b[sortBy]\n            : b[sortBy] - a[sortBy];\n        default:\n          return 0;\n      }\n    })\n  ), [appliedQuery, people, sortBy, sortOrder]);\n\n  const getSortTable = (sort:string) => {\n    if (sortOrder === 'asc') {\n      searchParams.set('sortOrder', 'desc');\n    } else {\n      searchParams.set('sortOrder', 'asc');\n    }\n\n    searchParams.set('sortBy', sort);\n    setSelectedSort(sort);\n\n    navigate(`?${searchParams.toString()}`);\n  };\n\n  const getOpenForm = () => {\n    setIsOpenForm(!isOpenForm);\n  };\n\n  return (\n    <div className=\"peoplePage\">\n      <h1 className=\"title\">\n        People Page\n      </h1>\n      {isOpenForm && (\n        <NewPerson\n          addNewPeople={addNewPeople}\n          people={people}\n          setIsOpenForm={setIsOpenForm}\n        />\n      )}\n      {isOpenForm\n        ? (\n          <Link to=\"/people\" onClick={getOpenForm}>\n            <p className=\"button btn\">\n              Close\n            </p>\n          </Link>\n        )\n        : (\n          <Link to=\"new\" onClick={getOpenForm}>\n            <p className=\"button\">\n              Add new person\n            </p>\n          </Link>\n        )}\n      <div>\n        <input\n          className=\"input is-normal inputMargin\"\n          style={{ width: '350px', marginBottom: '10px' }}\n          type=\"text\"\n          data-cy=\"filterInput\"\n          placeholder=\"filter table\"\n          value={query}\n          onChange={handleQueryChange}\n        />\n      </div>\n      {isLoading\n        ? <TailSpin color=\"blue\" />\n        : (\n          <PeopleTable\n            filterPeople={filterPeople}\n            getSortTable={getSortTable}\n            sortOrder={sortOrder}\n            selectedSort={selectedSort}\n          />\n        )}\n\n      {(filterPeople.length === 0) && <p>No results</p>}\n    </div>\n  );\n};\n\nexport default PeoplePage;\n","import React from 'react';\n\nconst HomePage: React.FC = () => {\n  return (\n    <h1 className=\"title\">Home page</h1>\n  );\n};\n\nexport default HomePage;\n","import './App.scss';\nimport 'bulma/css/bulma.min.css';\nimport {\n  Routes, Route, Navigate, Link,\n} from 'react-router-dom';\nimport PeoplePage from './components/PeoplePage/PeoplePage';\nimport HomePage from './components/HomePage/HomePage';\n\nconst App = () => (\n  <div className=\"App\">\n    <header>\n      <nav className=\"navbar\">\n        <Link className=\"navbar-item\" to=\"/\">Home page</Link>\n        <Link className=\"navbar-item\" to=\"/people\">People page</Link>\n      </nav>\n    </header>\n    <Routes>\n      <Route path=\"/\" element={<HomePage />} />\n      <Route path=\"people\" element={<PeoplePage />}>\n        <Route path=\":slug\" element={<PeoplePage />} />\n      </Route>\n      <Route path=\"*\" element={<p>Page not found</p>} />\n      <Route path=\"/home\" element={<Navigate replace to=\"/\" />} />\n    </Routes>\n  </div>\n);\n\nexport default App;\n","import ReactDOM from 'react-dom';\nimport { HashRouter } from 'react-router-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <HashRouter>\n    <App />\n  </HashRouter>,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}